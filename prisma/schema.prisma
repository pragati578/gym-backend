// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EmailChange {
  otp        String   @id
  newEmail   String
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  validUntil DateTime @default(dbgenerated("(timezone('utc'::text, now()) + '2 days'::interval)")) @db.Timestamp(6)
}

model PasswordReset {
  otp        String   @id
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  validUntil DateTime @default(dbgenerated("(timezone('utc'::text, now()) + '2 days'::interval)")) @db.Timestamp(6)
}

enum OTPType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  EMAIL_CHANGE
  OTHER
}

enum UserType {
  ADMIN
  USER
}

model Otp {
  id        String   @id @default(uuid())
  code      String   @unique @db.VarChar(6)
  type      OTPType  @default(OTHER)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, type])
}

model User {
  id            String         @id @default(uuid())
  firstName     String
  lastName      String?
  email         String         @unique
  password      String
  phoneNumber   String?        @unique
  avatar        String?
  companyName   String?
  userType      UserType       @default(USER)
  isVerified    Boolean        @default(false)
  otps          Otp[]
  emailChange   EmailChange?
  passwordReset PasswordReset?

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  UserMemberShip UserMemberShip[]
  Posts          Posts[]
  Comments       Comments[]
}

model MemberShip {
  id             String           @id @default(uuid())
  title          String
  description    String?
  price          Float
  UserMemberShip UserMemberShip[]
}

model UserMemberShip {
  id           String     @id @default(uuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  membershipId String
  membership   MemberShip @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Posts {
  id        String     @id @default(uuid())
  title     String
  content   String
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Comments  Comments[]
}

model Comments {
  id        String   @id @default(uuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
